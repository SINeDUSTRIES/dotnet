<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<!-- Imports -->
<!-- import the .user variant in this directory, if this is not the project directory (does not repeat above import) -->
  <Import
    Condition="Exists('$(MSBuildThisFileFullPath).user')"
    Project="$(MSBuildThisFileFullPath).user"
    />
    
<!-- import Directory.Build from the directory above this file -->
  <Import
    Condition="Exists($([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../')))" 
    Project="$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))" 
    />  
    
<!-- 
Setup before MSBump
$(BumpLabel) set "alpha" when version < 0
https://github.com/dotnet/cli/issues/3778 
-->
  <Target Name="SetupPreBump"
    BeforeTargets="BeforeBuild;MSBumpBeforeBuild"
    >
	
	<!-- only debugs have MSBump label -->
    
    <!-- Beta if version < 1.0 -->
    <PropertyGroup Condition="$(Version.StartsWith('0.')) == 'True' And '$(Configuration)' == 'Release'">
      <Alpha>False</Alpha>
      <Beta>True</Beta>
      <LabelFinal>beta</LabelFinal>
    </PropertyGroup>
    
    <!-- Alpha if version < 0.1 -->
    <PropertyGroup Condition="$(Version.StartsWith('0.0.')) == 'True' And '$(Configuration)' == 'Release'">
      <Alpha>True</Alpha>
      <Beta>False</Beta>
      <LabelFinal>alpha</LabelFinal>
    </PropertyGroup>
    
  </Target>
  
<!-- 
MSBumpBeforeBuild implicit version bumping
ie, label reset, version bumped
-->
<!-- Setup after MSBump -->
  <Target Name="SetupPostBump"
    AfterTargets="SetupPreBump;MSBumpBeforeBuild" 
    BeforeTargets="BeforeBuild"
  >  
    <!-- 
    $(Version)-$(LabelFinal)
    append final label AFTER reset and bump;
    -->
    <PropertyGroup Condition="$(LabelFinal) != ''">
      <Version>$(Version)-$(LabelFinal)</Version>
    </PropertyGroup>
    
    <!-- 
    $(PackageVersion) = $(Version)
    after all version stuff
    -->
    <PropertyGroup>
      <PackageVersion>$(Version)</PackageVersion>
    </PropertyGroup>
  
    <PropertyGroup>
      <NuGetPackagePath>$(OutputPath)\$(PackageId).$(PackageVersion).nupkg</NuGetPackagePath>
      <CommandNuGetPack>$(CommandNuGetPack) /p:PackageVersion=$(PackageVersion)</CommandNuGetPack>
      <CommandNuGetAdd>nuget.exe add &quot;$(NuGetPackagePath)&quot;</CommandNuGetAdd>
      <CommandNuGetPush>dotnet nuget push &quot;$(NuGetPackagePath)&quot;</CommandNuGetPush>
    </PropertyGroup>
  
    <Message Text="*****Version: $(Version); PackageVersion: $(PackageVersion); Alpha: $(Alpha); Beta: $(Beta)" Importance="high"/>
    <!-- <Message Text="*****Command, NuGet Pack: $(CommandNuGetPack);" Importance="high"/> -->
  </Target>

<!-- NuGet: Update -->
  <Target Name="NuGetUpdate" 
    BeforeTargets="BeforeBuild" 
    
    Condition="'$(Configuration)'!='Debug'" 
    >
    <Message Text="*****NuGet Update not yet supported: https://github.com/dotnet/cli/issues/5425#issuecomment-274343316; Project: $(MSBuildProjectFile)" Importance="high"/>  
  </Target>
  
<!-- AfterBuild -->
  
<!-- Copy: from $(OutputPath) to @(OutputDirectories) -->
  <Target Name="OutputCopySetup" AfterTargets="AfterBuild">
    <ItemGroup>
      <OutputFiles Include="$(OutputPath)\*.*" />
    </ItemGroup>
  </Target>
  <Target Name="OutputCopyDo"
    AfterTargets="AfterBuild;OutputCopySetup"
    
    Inputs="@(OutputDirectories)"
    Outputs="%(Identity).dummy"
    >
    
    <RemoveDir Directories="%(OutputDirectories.Identity)" />
    <Copy
      SourceFiles="@(OutputFiles)"
      DestinationFolder="%(OutputDirectories.Identity)"
      />
      
    <Message Text="*****Output Copy: $(OutputPath) to %(OutputDirectories.Identity)" Importance="high" />
  
  </Target>
  
<!-- NuGet Pack -->
  <Target Name="NuGetPack" 
    AfterTargets="AfterBuild;"
    
    Condition="'$(OutputType)' != 'Exe'"
    >
    <Message Text="*****NuGet Pack (MSBump): $(MSBuildProjectFile)" Importance="high" />
    <Exec Command="$(CommandNuGetPack)"/>
  </Target>
  
<!-- @(NuGetLocalFeeds) add -->
  <Target Name="NuGetAdd" 
    AfterTargets="NuGetPack"
    
    Condition="'$(OutputType)' != 'Exe' And '$(NuGetAdd)' == 'True'"
    
    Inputs="@(NuGetLocalFeeds)"
    Outputs="%(Identity).dummy"
    >
    <Message Text="*****NuGet Add: $(MSBuildProjectFile) -> %(NuGetLocalFeeds.Identity)" Importance="high"/>
    <Exec Command="$(CommandNuGetAdd) -Source &quot;%(NugetLocalFeeds.Identity)&quot;" />
  </Target>
  
<!-- 
@(NuGetRepos) push
with default key
-->
  <Target Name="NuGetPush"
    AfterTargets="NuGetAdd"
    
    Condition="'$(OutputType)'!='Exe' And '$(NuGetPush)' == 'True'"
    
    Inputs="@(NuGetRepos)"
    Outputs="%(Identity).dummy"
    >
    <Message Text="*****NuGet Push: $(MSBuildProjectFile) -> %(NuGetRepos.Identity)" Importance="high"/>
    <Exec Command="$(CommandNuGetPush) -s &quot;%(NuGetRepos.Identity)&quot;" />
  </Target>
  
</Project>